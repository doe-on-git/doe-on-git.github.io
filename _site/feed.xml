<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-06-25T07:22:39-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">The Forest</title><subtitle>The place where doe lives. &quot;Of course it is happening inside your head, Harry, but why on earth should that mean that it is not real?&quot;</subtitle><entry xml:lang="zh"><title type="html">Github新手向科普（It’s not just for geeks!）</title><link href="http://localhost:4000/Github%E6%96%B0%E6%89%8B%E5%90%91%E7%A7%91%E6%99%AE(It's-not-just-for-geeks!)/" rel="alternate" type="text/html" title="Github新手向科普（It's not just for geeks!）" /><published>2019-06-22T00:00:00-04:00</published><updated>2019-06-22T00:00:00-04:00</updated><id>http://localhost:4000/Github%E6%96%B0%E6%89%8B%E5%90%91%E7%A7%91%E6%99%AE(It's%20not%20just%20for%20geeks!)</id><content type="html" xml:base="http://localhost:4000/Github%E6%96%B0%E6%89%8B%E5%90%91%E7%A7%91%E6%99%AE(It's-not-just-for-geeks!)/">&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/Github-cat.webp&quot; alt=&quot;Otcocat&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;github是什么能&quot;&gt;Github是什么？（能？）&lt;/h2&gt;

&lt;p&gt;GitHub最初是为开发者所创建的社区。在这里，程序员们可以进行代码的版本控制与协同工作。但如今，许多的非程序员们也将GitHub作为其创作平台，享受它管理项目与合作的便利。正如GitHub官方所说，GitHub是一个为所有“知识工作者”（knowledge worker）所提供的工具。&lt;/p&gt;

&lt;p&gt;与其他的网络平台相比，GitHub更像是一个工具箱。它没有所谓的“正确”玩法，如何利用它来做自己想做的事，一切都靠想象力。推荐一些很有趣的非程序开发向GitHub repo：（repository 即仓库：用来管理项目。后文会有简单介绍）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/busterbenson/public&quot;&gt;Public Self&lt;/a&gt;：作者的内心世界，他的三观（belief），他的生活准则（rule），他喜欢的思想等等。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dylanegan/travel&quot;&gt;Travel Plan&lt;/a&gt;：作者所去过的地方以及想要去的地方。可以看到很多人在这里提出了旅行建议。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/theleagueof&quot;&gt;The League of Moveable Type&lt;/a&gt;：一个开源的字体设计组织，目前有18个仓库。任何人都能够下载字体，并提出设计意见。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JJ/hoborg&quot;&gt;A novel&lt;/a&gt;：一本完全利用GitHub写成的小说，已在amazon上架。任何人都能够提出修改建议，甚至基于此来写自己的小说。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/DCCouncil/dc-law-xml&quot;&gt;DC Law&lt;/a&gt;：Columbia州的法律，很多人在这里找typo。（不少国家和地区都把法律公开在了GitHub上。甚至于有人传了这个(&lt;a href=&quot;https://github.com/mlouielu/cn_constitution_2018&quot;&gt;you-know-what done by you-know-who&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.to/jpcs369/organizing-your-life-using-github-6an&quot;&gt;Organizing personal life&lt;/a&gt;：一个私人项目（private repo，仅自己可见）利用GitHub来管理自己的生活，如各种文件，照片，to-do list 等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;如何使用github怎&quot;&gt;如何使用GitHub？（怎？）&lt;/h2&gt;

&lt;p&gt;当然首先你需要一个账号。（大部分功能免费。对于在校学生来说还有student pack，有兴趣可以自行研究。）接下来要怎么做？满屏幕的不明词语令人头秃？不用担心啦，只要大概理解GitHub的工作流程，这只傲娇的Octocat也只是一只傲娇的喵星人而已。&lt;/p&gt;

&lt;p&gt;下图是一张简要的github工作流程：
人类1和人类2打算合作写一本小说。在写到第十章时，两人的思路发生了分歧，于是人类2创建了分支(branch)。但随后两人的故事实在无法融合，于是经过协商，他们决定从第十章重新开始写，于是将仓库滚回版本1.2。两人分别完成自己的部分后，将仓库融合(merge)。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/novel-1.webp&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/images/novel-2.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了上文提到的合作方式外，GitHub还提供了许多种与他人repo的互动方式，最常见的就是右上角的watch, star 和folk。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;watch：观察。当这个repo内容有任何的内容变化，包括收到pull request, issue（下文会讲）时，点了watch的人都会收到系统提醒。&lt;/li&gt;
  &lt;li&gt;star: 类似于点赞+收藏功能。可以在自己的账户下看到所有自己点过star的repo。&lt;/li&gt;
  &lt;li&gt;folk: 类似于复制功能。把当前版本的repo复制到自己的账户下，且做任何修改都不会对原repo有影响。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此外，他人（非合作者）也可以向repo提供自己的贡献：issue和pull request。（例如在上文提到的travel plan的仓库中，可以看到许多人在issue区进行讨论，以及通过pull request对作者的travel plan提出建议。）&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;issue：即讨论区，可以和作者以及其他人在这里讨论这个repo的内容。&lt;/li&gt;
  &lt;li&gt;pull request: 即提出要把自己对这个repo的修改部分合并入作者的分支中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/coop.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;如何利用github搭建个人blog怎&quot;&gt;如何利用GitHub搭建个人blog？（怎？）&lt;/h2&gt;
&lt;p&gt;GitHub还有一个诱人的功能，就是可以免费host自己的blog。不需要买域名，不需要服务器，只要在自己的GitHub账户下建立一个以username.github.io 为名的仓库，然后将博客内容上传到这个仓库下，GitHub会自动为你生成该博客。&lt;/p&gt;

&lt;p&gt;利用github搭建博客还有一个便利之处，就是可以利用github的folk功能来diy自己的blog样式。如果你看到喜欢的blog，便可以folk过来再改一改域名，变成自己的。也可以自己动手修改配置文件_config.yml 来修改样式。（比如把好几个blog的喜欢之处参考过来，搭建自己的blog。）&lt;/p&gt;

&lt;p&gt;具体的搭建过程，网上有无数的教程，这里就不再叙述啦。&lt;/p&gt;

&lt;h2 id=&quot;github的优势与缺点好&quot;&gt;GitHub的优势与缺点？（好？）&lt;/h2&gt;
&lt;p&gt;先说说优点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;墙内可见。&lt;/li&gt;
  &lt;li&gt;去中心化。（任何人都可以把仓库folk过来。举个例子：如果想要墙某一个仓库的内容，那必须把从这个仓库folk过来的所有仓库都墙了。）&lt;/li&gt;
  &lt;li&gt;版本管理。&lt;/li&gt;
  &lt;li&gt;十分便利多人协同工作。&lt;/li&gt;
  &lt;li&gt;不重复造轮子。（开源的便利之一，大家可以使用并做出贡献。）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;缺点：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;需要一点点时间来上手。（并不是学习代码，官方提供的git工具已经解放了命令行的使用。而是熟悉github的工作流程。）&lt;/li&gt;
  &lt;li&gt;与其他社交网站相比，它不适合用来catch up with friends。（可能更适合用来做一些深入的事情。）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那么接下来？（what to go from here?）
推荐一些教程：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.classcentral.com/course/udacity-how-to-use-git-and-github-2661&quot;&gt;How to use git and github?&lt;/a&gt;  Udacity的一个online 课程。
&lt;a href=&quot;https://www.cnblogs.com/jsonphp/articles/7760810.html&quot;&gt;Git图形化工具介绍&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;感谢你看到这里。如果你有喜欢的（非开发向）github repo，或新手向的github教程十分欢迎留言，会更新在正文中。另外，如果本文有哪里描述不清楚，或错误，欢迎留言，会更正。&lt;/p&gt;</content><author><name></name></author><category term="About Learning" /><category term="Git" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="path:# /images/abstract-3.jpg feature:# abstract-3.jpg credit:# dargadgetz" /></entry></feed>